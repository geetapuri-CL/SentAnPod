 Alright guys, bang bang. I've got Andreas here. We were recording this on a nice rainy day in New York City. So thanks for braving it and coming on. Hey folks. Cool man. We've got to know each other over the last year or so, a couple of months, whatever it is.  for the distributed team, people from pretty much most of the regions. We usually hired between West Coast and Eastern Europe. After we sold to AngelList, I joined for one year at CoinList, the crypto team, did like VP of engineer there. And since beginning of this year, I kind of focus on my main passion, which is kind of promoting remote work as a concept. And especially now, as in the Bay Area, it becomes we have like this critical moment where we have enough people starting to  I think Ryan said multiple times that he was really working out of coffee shop, right? And kind of people all over the world were contributing to this. So maybe talk a little bit about how you got hooked up with the, with that founding team and then kind of where the decision to build a remote team versus kind of a more centralized team in a single office came from. Yeah. So I think it's pretty much spot on. Like all of us believe that this is a side project when I joined, um, like I was actually working on my own startup and then ran out of money. Uh, like I literally forgot that I  clients who pay proper rates. Weirdly enough, it was like from day one, constant like fire fighting and all this kind of stuff. And like we had like a huge growth spurt in that time. And I never really got to work on any other clients. A few weeks later, all of a sudden he was like, I think we can get into YC. And I was like, dude, like, no, I received my rejection from YC like a few weeks ago. They had, they started the cohort. It's done, you know, like maybe later. And he was like, no,  And I'm like, okay, I think we can raise money. So all of a sudden this thing that all of us believe to be a side project that we really wanted to do had budget and we could actually focus full time on it. And at that point we were already remote, but more out of the fact that we got everybody involved who kind of we liked and was able to help. And then I started hiring some of the best people I know, which don't happen to be in the same small city. And at some point I was like, do we actually do this intentionally or not?  office and get everybody over and finally become a real company. And I was like, okay, maybe, maybe no, maybe we are already a real company. And oddly enough, the same friend is now promoting remote work on Twitter. So I think we're now at this tipping point where it's kind of like becoming aware for the Silicon Valley area that's usually living in their own bubble. Yeah. So let's talk a little bit about two things. So one is, you backed into one of the best pieces of advice I ever got, which was if you keep your personal burn rate  Maybe talk a little bit about, you know, had you always spent your life, um, you know, kind of with that mindset or was it more just, um, serendipity and that's where you ended up. I think I was in a fortunate position at that point because we completely tanked our previous startup and I had like a huge somewhere between Bernard and mid-life crisis. So very fortunate position to be in because it also allowed me to literally sold everything I had and had like one piece of luggage where everything was in and I was constantly like living between cities. I know that are cheap.  have done that if I wouldn't have been that cheap at that point. That being said, when you grow up and you get like a family and everything is like a little bit different of obviously like more responsibility and everything. But I think the general fact here is true. Like if you have, if you manage to be on a low burn rate, you have more opportunity. And that would always be true, especially for founders. Got it. And then the second thing is this balance between focusing on fundraising and kind of taking a bunch of time away from that of building the product or just focus on building the product.  in Europe and we got like every bad advice that you can give to a team. We did literally everything wrong. We had at some point we had a business plan, like nobody writes a business plan, but like we had a business plan in two different languages. We had a financial model that could do balancing and like the craziest stuff. We had multiple pitch decks, multiple variations that was so good in like pitching it in so many different ways, but we didn't spend enough time on actually building the product because we were like kind of advised to focus on that, you know. So  flow chart and the flow chart is roughly more than twice my size. And at Product Hunt, I experienced what the difference is if you have actual traction. Like traction literally solves every problem, especially when it comes to fundraising. And we were in this ridiculous position to be the one hyped company at Y Combinator back then. And anybody who has ever been to Y Combinator, there's always like one or two companies that stand out in that batch, you know, and if you're one of those, you literally get overrun with offers.  really does come down to, can you figure out how to, um, you know, to, to kind of scale the product and continue to build a product that people want without getting distracted. Absolutely. And the other thing, which most people don't tell you, it's, it's extremely terrifying. Like I remember regularly looking at our charts, everything going up to the right. And I was like, I don't do anything different right now, or at least I feel I don't do anything different with the companies where nothing worked. So maybe I have absolutely no control over this.  a lot of investors actually just try to get into these deals to do like sticker collecting, you know, just prove that they have access and by logos, by logos, exactly. And it's kind of almost like to this point, like there used to be this saying, like, nobody ever got fired for buying IBM or something like that, you know, and it feels almost like with a lot of VCs, it's kind of like get into the hype deals, especially if your fund isn't that credible yet, you know, that's like the one number one thing to build up credibility, you have this logo,  they're hitting the tops of whether it's the app store or some other metrics that are pretty identifiable and quantifiable. You want to continue to iterate and improve the product, but you also don't want to mess it up. And so it's like, hey, look, this is working. How far do we actually go to improve it versus if we make a change, it could hinder that growth. And then the second thing is I always joke about, you don't understand what you described as a terrifying feeling until literally the servers are like melting.  assuming that that's what you guys were dealing with too, and then you add on the remote layer on top of it. Yeah, absolutely. The other thing is also, in my opinion, there are teams that scale with a code base that wasn't meant to be scaled and there are teams who don't scale and there's almost nothing in between. And we also had this like in the beginning, most of our problems were homemade. They were just like, we didn't do our homework properly. We didn't have the time, right? And so we constantly had like performance problems  We did a lot of like feature flag rollouts, a lot of stock launches, a lot of better testing. It was to the point that we shipped, we tried to, we had a very aggressive shipping cycle. We basically had this idea of having public announcement about new features and products every, I think back then it was two weeks, two and a half weeks, something like that. With the idea of like, even with product feature A doesn't work right now, we wanted something else to kind of show, to give this  a number of venture capitalists on Twitter talking about like the way that you raise capital with a deck they were talking about is around the narrative. So the world exists in this way today. We're going to do this thing. After we do this thing, the world's going to change and here's what it's going to look like in the future. What you guys were doing, I think, was you were iterating so quickly and there was this feeling of like, even though it was only every two weeks, it felt like every day there was an announcement, right? Just because it was happening so rapidly. And you could quickly  about the experience of combining forces with AngelList and kind of what the logic there was. So the interesting thing with AngelList was that they were culturally and like by their goal as a company very much aligned with us. So AngelList this overall mission of following the arc of a startup. So you're kind of like, you find your co-founders, you have an idea, you launch, you raise money,  the biggest angle to this would be through investment and this kind of like basically monetizing the hype and all this kind of stuff as like into investments and all these kinds of things. So for us, the whole partnership or merge with Angelist came almost like kind of natural. I was originally actually against it because I was like, no, we raise more money and we go like go crazy. Looking back, that was actually the best thing we could do at that point, because team wise and culture wise, the teams overlap really well. And a lot of the people who were product  And so you today serve as the head of remote at AngelList. Let's describe a little bit about what that is and then we can get into some of the actionable advice around remote work. Yeah, so technically it's, so the amazing thing about this title is that nobody knows what this title is supposed to mean. And by now I actually just keep it because it's so confusing. It's kind of like it sounds big, right? I think a better title looking back would have been head of remote products. So AngelList has the largest job board for starters.  for that. That's not my job. Nowadays, what I actually think is even though if I don't do the job of a head of remote, that like this cultural aspect, I believe that's a very valid job for a lot of larger teams that are either remote or remote first. And for example, at GitLab, there is Darren, who is now the head of remote there, whose main job is to make sure that internally they work more and more efficient. And it works for everybody that like any  Is it magical? Is it societal? Is it a mixture of things? So personally, I think there's nothing particularly new about this. What happened now is more than the big tech hubs that usually were very bullish on having everybody in the same place. And that's mainly San Francisco Bay Area, a little bit New York, that they are now seeing as an alternative. And they now have enough, the VCs especially, now have enough, I would say, data points to have alternative pattern recognition. And like, okay, this can actually also produce a large company like GitHub, GitLab, SAP, or there's like enough  work. I just happen to work for a company in Boston, you know. And if you look at the underlying trends, more people working online, more people working in digital knowledge work and more people working internationally with international teams, all of that have the logical conclusion that remote work is like it by default. And I think we're now at this point where we don't even, even if we think we work non-remote, we actually most of the time already work remote. So many people are checking their email on the way to work, are working  distribute your team is across time zones of the people you work with. So basically, how's our synchronous do you work? So access one is basically how easy would it for you to be come to come to a headquarter and access to is like, how asynchronous is the team you're working in. And I think this will be more the discussion in the future. So the discussion will be more like like, how asynchronous do you want this team to be? Do you want to hire people in more than, let's say five to eight hours of time zone difference? Is this something you actually want to aspire to? You think notice is like going to kill our  is like where it's going. And we're kind of like in this weird moment of time, where remote work is kind of like a concept that we still intentionally can talk about. And then in future, it will be much more like, okay, I have people in different time zones, and I have to find ways that the synchronous work works better, and we will focus more on these angles. Got it. And so as you get into the remote work, I agree with you that, you know, four or five years from now, it's just be work. But there's a lot of, I don't want to say fear,  people running meetings, right? So that's kind of like an easy one where yeah, there's conference calls and things like that, but if you have folks who are in different geographies, different time zones, et cetera, you can't get everyone to walk into the same conference table and hold a meeting. So like what are some of the best practices you see there in terms of just meetings for remote teams? I think one of the important parts is here to understand where you currently are on the company. Like if you think of like a spectrum line or whatever and where you want to be. And so for example,  If you're remote, it's very easy for you to write something down and very annoying to like talk synchronously about something at least for a longer time. So what's happening is not that like one is better than the other, it's just on different communication layers by default. So what you need to be in the, for example, in a hybrid team is you need to be very intentional about the bridge between this. And the problem is that humans will always tend to the thing that's easy. They will always go for the thing that's like more approachable and easier and like basically you all are lazy by default. So  optimized for the majority of the team versus of the two people who happen to be in the office. So for example, you, it's very common that you have your infrastructure team remote, that you have your customer care team in road, like, and this kind of like sub team approach works really well because that way you get like the learnings you can bring into the rest of the company. Um, other things here is, uh, if you cannot do that, for example, because for example, you need to do like your all hand meeting where the majority of people happens to be in the office. What I highly recommend is half the people who do talk call in.  that are culture internally.  It needs to be important. It's very clear what the decisions afterwards are. It's very clear who is the action, who takes the action item, who owns it, and so on and so on. That necessarily has nothing to do with remote work. That's just management 101. The problem you have in most remote teams is you can't as easily monkey patch or hotfix bad management or bad processes. In a co-located office, if you have a bad process about something and there's constantly people a little bit  we've talked about so far is with synchronous meetings where everyone's there at the same time. I know that there's some remote teams who either through time zone or personal preference, they feel a need or want to hold asynchronous meetings, meaning that how do we share information and communicate, but we're not there all at the same time. What have you seen there as kind of the way people are doing that or doing it well? This is like the one thing where I think currently the most iteration is happening in tooling and product. It's usually much more around  the sub teams who work with together a lot tend to be roughly in the same time area, like roughly five hours overlap, three hours of a lot worst case. So like some overlap has to happen. So like the mobile team maybe or whatever team or like the management team leadership team, they're roughly in the same time zone area because it's just you otherwise lose too much time around this. The other counterintuitive thing is like I highly recommend that remote teams meet as much as possible.  how do you think about documenting information and sharing information? So not necessarily meetings, right, where you and I need to talk, but more around this process stuff, right? So I'm going to put notes into the code, right? But I also have non-technical areas of process or commenting, et cetera. Like, how do you see teams doing that today? So the biggest learning I had here is, for example, as an engineer, you know that you are  You will hate you hate the fact that there's communication problems. There is constantly misunderstanding or whatever All of these kind of problems don't go away They're just getting replaced by other process problems on the long run and you just need to accept that almost and need to basically say Okay, what it works for now. What is good enough for now? Do that make it explicit? That's the most important part like make it explicit to the point that the things that your team already is doing It should be aware that this is like we do this intentionally  your company should operate and they come up with this really, really complex answer for every question that might ever be asked, like this big Gantt, this big flowchart I mentioned in the beginning, right? And do that for processes. That's the biggest, like that's the easiest way to wreck your company in my experience. For sure. And you mentioned management, right? That kind of, I know you've given a number of talks on like managing a remote team. How does that differ from managing a non-remote team?  point you hit like this logarithmic scaling point where if you're like 200, 400 people, you don't work as if you would be more than 1000 or something like that. And so in reality, you have like a little bit more awareness around processes and you need to be, I think like the biggest learning here for me was like you manage processes and you lead people versus you manage people. And I think this is the biggest learning I had here. So you kind of like want to get to the  So for example, in an engineering team, I might expect that the people when they start working, the first thing they do is that they review code of other people. And I expect them to do that before they do their own stuff. And the reason I expect them to do that is so, for example, that other people are as unblocked as early as possible. Right. So if you have people working across multiple time zones, there will always be somebody who has reviewed your code before you come back next day. Right. And that's an explicit expectation that that's not a complex handover. That's just a simple example.  And so in reality, as a manager, you manage processes. Your job as a manager is not to make decisions. Your job as manager is to figure out together with your team what decisions need to be done, who does them, and make sure these decisions are made. And ideally, you want the most capable person in your team to make the decision wherever they're most capable about. And to have a process where this person is actually enabled to make these decisions, run with these decisions, that's your job as a manager. So you need to set up a team where everybody can actually  popular game for Nintendo. So the goal is like how can you be as autonomously as possible and then pull in people for quality work and pull people in for things where you actually want to pull them in. And this is kind of where like your job as a manager comes in. Like how can you enable people to do that? And the sad truth here is as a manager, every problem in your company, every mistake that anybody does is ultimately your fault. And so it's very easy to blame your engineering team  What you're talking about is really giving people the autonomy to do the things that you think are best, right? You have to really trust them. They've got to essentially be successful on their own and you add up all those individual successes and it makes the team successful, but that's all built on the premise that you hire the right people, right? And so how do you think about any changes to the hiring process when teams are remote, given this kind of more autonomy-driven work  person went to. You might not know the company they worked for. You don't know. You might even struggle understanding cultural differences. You know, like why is this person, why does this person look pissed off all the time in this call? You know, and that's just no Germanic person. That's just me, you know, Red's resting bitch face, you know. It's just like you struggle maybe with this little differences. And especially, for example, if you're used to hiring tech hubs, it kind of breaks down if people don't follow these patterns.  experience this works best. I know teams that go as far like Webflow is notorious for this. They do interviews that are more about figuring out if this person would be a good cultural like people fit, you know, and then afterwards they literally just pay this person to work with them for a week. And after the week, they give them an offer, which is in my opinion crazy because who can take off a week and just like work at some other company to see if they want to like work there, you know, but it works for them really well. And  And it works really well for them. This is an extreme case, you know, but you can't do this like low-fi like I strongly believe in remote work on on contract for hire give somebody a project like work with them on something real, you know and Agree on a rate that's not like they're Extreme amount for freelancing and it's not like as low as like the full-time hiring broken down to a few days You know, but somewhere in between so it's fair for both sides if it works put a contract afterwards  So we've talked a lot about kind of managing, but if you're that person in the remote team who's sitting, there's no one in your city that work at your company. So you're fully remote 100% of the time. What are some of either the mistakes you make or the things that you can do to actually make the team work better? Right? Cause you've sat in that seat before, like what were some of the things that you did, either good or bad, that you think people should be aware of? There's multiple things. Like one angle is like in the end,  that  team  Absolutely. A friend of mine, he's working for a company one and a half days a week and it works really, really well. And I don't know how he's doing it and I'm trying to learn that. I really don't understand it, but it works really well. What's he did the rest of the week? I'm trying to figure out. He has a lot of open source, so I think it's that, you know, but whenever he comes to that office, he's working with roughly one or two days. So yeah, people work very  first capital, which is basically me plus right 60 people right now, 70 people maybe, uh, investing together in startups that either, um, improve remote work or leverage remote work in a unique way. And the interesting thing when it comes to that is a lot of people think instantly about communication tools and I, me too, like communication tools is obviously an important one, but it's almost like the most boring thing you can invest in when it comes to remote work right now.